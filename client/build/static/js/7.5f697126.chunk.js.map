{"version":3,"sources":["components/Page.js","routes/paths.js","components/authentication/reset-password/ResetPasswordForm.js","pages/authentication/ResetPassword.js"],"names":["Page","forwardRef","ref","children","title","other","propTypes","PropTypes","node","isRequired","string","path","root","sublink","ROOTS_DASHBOARD","ROOTS_AUTH","PATH_AUTH","login","loginUnprotected","register","registerUnprotected","resetPassword","verify","ResetPasswordForm","onSent","onGetEmail","useAuth","isMountedRef","useIsMountedRef","ResetPasswordSchema","Yup","shape","email","required","formik","useFormik","initialValues","validationSchema","onSubmit","values","a","setErrors","setSubmitting","current","console","error","afterSubmit","message","errors","touched","isSubmitting","handleSubmit","getFieldProps","value","autoComplete","noValidate","Stack","spacing","Alert","severity","TextField","fullWidth","type","label","Boolean","helperText","LoadingButton","size","variant","loading","RootStyle","styled","display","minHeight","alignItems","justifyContent","padding","theme","ResetPassword","useState","setEmail","sent","setSent","LogoOnlyLayout","Container","Box","sx","maxWidth","mx","textAlign","Typography","gutterBottom","Button","component","RouterLink","to","mt","paragraph","color","mb"],"mappings":"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","file":"static/js/7.5f697126.chunk.js","sourcesContent":["import React from \"react\"\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport { forwardRef } from 'react';\n// material\nimport { Box } from '@material-ui/core';\n\n// ----------------------------------------------------------------------\n\nconst Page = forwardRef(({ children, title = '', ...other }, ref) => (\n  <Box ref={ref} {...other}>\n    <Helmet>\n      <title>{title}</title>\n    </Helmet>\n    {children}\n  </Box>\n));\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string\n};\n\nexport default Page;\n","// ----------------------------------------------------------------------\n\nfunction path(root, sublink) {\n  return `${root}${sublink}`;\n}\n\nconst ROOTS_DASHBOARD = '/dashboard';\nconst ROOTS_AUTH = '/auth';\n\n// ----------------------------------------------------------------------\n\nexport const PATH_AUTH = {\n  root: ROOTS_AUTH,\n  login: path(ROOTS_AUTH, '/login'),\n  loginUnprotected: path(ROOTS_AUTH, '/login-unprotected'),\n  register: path(ROOTS_AUTH, '/register'),\n  registerUnprotected: path(ROOTS_AUTH, '/register-unprotected'),\n  resetPassword: path(ROOTS_AUTH, '/reset-password'),\n  verify: path(ROOTS_AUTH, '/verify')\n};\n\nexport const PATH_USER = {\n  home: '/'\n};\n\nexport const PATH_DASHBOARD = {\n  root: ROOTS_DASHBOARD,\n  general: {\n    pageOne: path(ROOTS_DASHBOARD, '/one'),\n    pageTwo: path(ROOTS_DASHBOARD, '/two'),\n    pageThree: path(ROOTS_DASHBOARD, '/three')\n  },\n  app: {\n    root: path(ROOTS_DASHBOARD, '/app'),\n    pageFour: path(ROOTS_DASHBOARD, '/app/four'),\n    pageFive: path(ROOTS_DASHBOARD, '/app/five'),\n    pageSix: path(ROOTS_DASHBOARD, '/app/six')\n  }\n};\n","import * as Yup from 'yup';\nimport React from \"react\"\nimport PropTypes from 'prop-types';\nimport { Form, FormikProvider, useFormik } from 'formik';\n// material\nimport { TextField, Alert, Stack } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab';\n// hooks\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\n\n// ----------------------------------------------------------------------\n\nResetPasswordForm.propTypes = {\n  onSent: PropTypes.func,\n  onGetEmail: PropTypes.func\n};\n\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\n  const { resetPassword } = useAuth();\n  const isMountedRef = useIsMountedRef();\n\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required')\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      email: 'demo@minimals.cc'\n    },\n    validationSchema: ResetPasswordSchema,\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\n      try {\n        await resetPassword(values.email);\n        if (isMountedRef.current) {\n          onSent();\n          onGetEmail(formik.values.email);\n          setSubmitting(false);\n        }\n      } catch (error) {\n        console.error(error);\n        if (isMountedRef.current) {\n          setErrors({ afterSubmit: error.message });\n          setSubmitting(false);\n        }\n      }\n    }\n  });\n\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\n\n          <TextField\n            fullWidth\n            {...getFieldProps('email')}\n            type=\"email\"\n            label=\"Email address\"\n            error={Boolean(touched.email && errors.email)}\n            helperText={touched.email && errors.email}\n          />\n\n          <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\n            Reset Password\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n","import { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// material\nimport { styled } from '@material-ui/core/styles';\nimport { Box, Button, Container, Typography } from '@material-ui/core';\n// layouts\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\n// routes\nimport { PATH_AUTH } from '../../routes/paths';\n// components\nimport Page from '../../components/Page';\nimport { ResetPasswordForm } from '../../components/authentication/reset-password';\n//\n// import { SentIcon } from '../../assets';\n\n// ----------------------------------------------------------------------\n\nconst RootStyle = styled(Page)(({ theme }) => ({\n  display: 'flex',\n  minHeight: '100%',\n  alignItems: 'center',\n  justifyContent: 'center',\n  padding: theme.spacing(12, 0)\n}));\n\n// ----------------------------------------------------------------------\n\nexport default function ResetPassword() {\n  const [email, setEmail] = useState('');\n  const [sent, setSent] = useState(false);\n\n  return (\n    <RootStyle title=\"Reset Password | Minimal UI\">\n      <LogoOnlyLayout />\n\n      <Container>\n        <Box sx={{ maxWidth: 480, mx: 'auto' }}>\n          {!sent ? (\n            <>\n              <Typography variant=\"h3\" paragraph>\n                Forgot your password?\n              </Typography>\n              <Typography sx={{ color: 'text.secondary', mb: 5 }}>\n                Please enter the email address associated with your account and We will email you a link to reset your\n                password.\n              </Typography>\n\n              <ResetPasswordForm onSent={() => setSent(true)} onGetEmail={(value) => setEmail(value)} />\n\n              <Button fullWidth size=\"large\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 1 }}>\n                Back\n              </Button>\n            </>\n          ) : (\n            <Box sx={{ textAlign: 'center' }}>\n              {/* <SentIcon sx={{ mb: 5, mx: 'auto', height: 160 }} /> */}\n\n              <Typography variant=\"h3\" gutterBottom>\n                Request sent successfully\n              </Typography>\n              <Typography>\n                We have sent a confirmation email to &nbsp;\n                <strong>{email}</strong>\n                <br />\n                Please check your email.\n              </Typography>\n\n              <Button size=\"large\" variant=\"contained\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 5 }}>\n                Back\n              </Button>\n            </Box>\n          )}\n        </Box>\n      </Container>\n    </RootStyle>\n  );\n}\n"],"sourceRoot":""}